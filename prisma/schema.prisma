generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum HabitType {
    DEFAULT
    COUNTER
    CHECKLIST
    TIMER
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

type UserSettings {
    firstDayOfWeek   Int     @default(1)
    language         String  @default("en")
    modifyDaysPast   Boolean @default(true)
    modifyDaysFuture Boolean @default(true)
}

model User {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    name       String?
    email      String?      @unique
    accounts   Account[]
    sessions   Session[]
    categories Category[]
    habits     Habit[]
    settings   UserSettings

    @@map("users")
}

model Category {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    color     String
    icon      String
    createdAt DateTime @default(now())
    userId    String?  @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])
    habits    Habit[]

    @@map("categories")
}

model Habit {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    type        HabitType
    description String
    categoryId  String    @db.ObjectId
    category    Category  @relation(fields: [categoryId], references: [id])
    createdAt   DateTime  @default(now())
    userId      String    @db.ObjectId
    user        User      @relation(fields: [userId], references: [id])
    frequency   Int[]
    startDate   DateTime
    endDate     DateTime?
    details     Json
    checkIns    CheckIn[]

    @@map("habits")
}

model CheckIn {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    date    DateTime
    habitId String   @db.ObjectId
    habit   Habit    @relation(fields: [habitId], references: [id])
    value   String

    @@map("checkins")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime @map("expiresAt")

    @@unique([identifier, token])
    @@map("verification_tokens")
}
